import pandas as pd
from math import pi, sqrt
from quantuloop import qubox_ufsc
qubox_ufsc.set_token('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJRdWFudHVsb29wIFNlcnZlciAoUUNMYWJzKSIsInN1YiI6IlF1YW50dWxvb3AgU2VydmVyIFVTRVIgdG9rZW4iLCJhdWQiOiJ1c2VyIiwiZXhwIjoxNjYyOTAxMjI0LCJuYmYiOjE2NTUxMjUyMjQsImlhdCI6MTY1NTEyNTIyNCwibmFtZSI6IlRlbyBIYWVzZXIgR2FsbGFyemEiLCJlbWFpbCI6InRlb2dhbGxhcnphQGdtYWlsLmNvbSJ9.VzLICW6r8x1bAmfr0TGEgDGgv1y9FwE3G2_X3VIfLXQ')


def cnf_to_oracle(var, cla, expr):
    x_state = [True]*len(var)    # True = positive, False = Negative
    i = 0   # The counter for wich clause is being analysed
    offset = len(var) # pedir lista revertida

    X(cla)
    for c in expr:    # accessing only the clauses
        list_var = []   # list variables being used in a single clause   
        for v in c.split()[:-1]:    # ignoring the 0 at the end
            if '-' in v:
                state = False
            else:
                state = True
            var_num = offset - abs(int(v)) - 1    # -1 for easier access on the list
            if state != x_state[var_num]:
                X(var[var_num])
                x_state[var_num] = not x_state[var_num]
            list_var.append(var[var_num])
        ctrl(list_var, X, cla[i])
        i += 1 

def grover(variables, clauses, expr, steps) -> int:
    """Grover's search algorithm"""

    var = quant(variables)
    cla = quant(clauses)
    aux = X(quant())

    H(var)
    H(cla)
    H(aux)

    for _ in range(steps):
        with around(cnf_to_oracle, var, cla, expr[3:]):
            ctrl(cla, X, aux)
        with around([H, X], var):
            ctrl(var[1:], Z, var[0])

    return measure(var).value

def test(expression, iterations):
    m = 1
    lamb = 6/5

    expr = expression.split('\n')
    _,_,vari, clau = expr[1].split()
    size = vari = int(vari)
    clau = int(clau)

    print(f"Starting test 1 with {iterations} iterations")

    for i in range(iterations): #testing differente iteration
        print(f'Iterations:{i}; Result:{grover(vari, clau, expr, i)}')

if __name__ == '__main__':
    df = pd.read_csv('../sats.csv')
    sats = df.values.tolist()

    _, sat = sats[-1]

    iterations = 4
    test(sat,iterations)
